#Store - name, phone number, email, and address for each contact.
#Add Contact (with details), View Contact List (names & phno), Search Contact (by name & phno), Update Contact (contact deatails), Delete Contact

import tkinter as tk
from tkinter import messagebox, simpledialog

class ContactBook:
    def __init__(self, root):
        self.root = root
        self.root.title("Contact Book ‚òéÔ∏è")
        self.root.geometry("450x500")
        self.root.config(bg="azure")

        self.contacts = []

        # Title
        title = tk.Label(root, text="Contact Book ‚òéÔ∏è", font=("Helvetica", 18, "bold"), bg="azure")
        title.pack(pady=(20,10))

        # Frame for subtitle "Contacts" + add button (horizontal row)
        header_frame = tk.Frame(root, bg="white")
        header_frame.pack(fill=tk.X, padx=20, pady=(0, 20))

        subtitle = tk.Label(header_frame, text="Contacts", font=("Arial", 15), bg="white")
        subtitle.pack(side=tk.LEFT)

        add_btn = tk.Button(header_frame, text="+ Create contact", bg="dodgerblue", fg="white", command=self.add_contact)
        add_btn.pack(side=tk.RIGHT)

        # Frame for Search Entry (below title)
        search_frame = tk.Frame(root, bg="azure")
        search_frame.pack(pady=(0, 10))

        self.search_var = tk.StringVar()
        search_entry = tk.Entry(search_frame, textvariable=self.search_var, width=70, bg="white")
        search_entry.pack()
        search_entry.insert(0, "Search by name or phone...")
        search_entry.bind("<KeyRelease>", self.search_contacts)

        # Contacts display area
        self.list_frame = tk.Frame(root, bg="azure")
        self.list_frame.pack(fill=tk.BOTH, expand=True)

        self.display_contacts()

    def display_contacts(self, contacts=None):
        # Clear current list
        for widget in self.list_frame.winfo_children():
            widget.destroy()

        if contacts is None:
            contacts = self.contacts

        for index, contact in enumerate(contacts):
            frame = tk.Frame(self.list_frame, bg="white", bd=1, relief="solid")
            frame.pack(fill=tk.X, padx=10, pady=4)

            # Left frame: Name and phone
            left_frame = tk.Frame(frame, bg="white")
            left_frame.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)

            name_lbl = tk.Label(left_frame, text=contact['name'], font=("Arial", 12, "bold"), bg="white", anchor="w")
            name_lbl.pack(anchor="w", padx=10, pady=(2, 0))

            phone_lbl = tk.Label(left_frame, text="üìû " + contact['phone'], font=("Arial", 10), fg="gray", bg="white")
            phone_lbl.pack(anchor="w", padx=10, pady=(0, 5))

            # Right frame: Edit and delete buttons
            right_frame = tk.Frame(frame, bg="white")
            right_frame.pack(side=tk.RIGHT, padx=10)

            edit_btn = tk.Button(right_frame, text="‚úé", bg="white", command=lambda idx=index: self.edit_contact(idx))
            edit_btn.pack(side=tk.LEFT, padx=5)

            del_btn = tk.Button(right_frame, text="üóëÔ∏è", bg="red", fg="white", command=lambda idx=index: self.delete_contact(idx))
            del_btn.pack(side=tk.LEFT, padx=5)

    def add_contact(self):
        name = simpledialog.askstring("Name", "Enter Full Name:")
        if not name:
            return

        phone = simpledialog.askstring("Phone", "Enter Phone Number:")
        if not phone:
            return

        email = simpledialog.askstring("Email", "Enter Email Address:")
        address = simpledialog.askstring("Address", "Enter Address:")

        self.contacts.append({
            "name": name,
            "phone": phone,
            "email": email or "",
            "address": address or ""
        })
        self.display_contacts()

    def delete_contact(self, index):
        confirm = messagebox.askyesno("Delete", "Are you sure you want to delete this contact?")
        if confirm:
            del self.contacts[index]
            self.display_contacts()

    def search_contacts(self, event=None):
        query = self.search_var.get().lower()
        filtered = [c for c in self.contacts if query in c['name'].lower() or query in c['phone']]
        self.display_contacts(filtered)

    def edit_contact(self, index):
        contact = self.contacts[index]

        name = simpledialog.askstring("Edit Name", "Edit Full Name:", initialvalue=contact['name'])
        phone = simpledialog.askstring("Edit Phone", "Edit Phone Number:", initialvalue=contact['phone'])
        email = simpledialog.askstring("Edit Email", "Edit Email:", initialvalue=contact['email'])
        address = simpledialog.askstring("Edit Address", "Edit Address:", initialvalue=contact['address'])

        self.contacts[index] = {
            "name": name or contact['name'],
            "phone": phone or contact['phone'],
            "email": email or contact['email'],
            "address": address or contact['address'],
        }
        self.display_contacts()   

root = tk.Tk()
app = ContactBook(root)
root.mainloop()
