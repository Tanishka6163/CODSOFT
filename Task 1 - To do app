#date, time, task, completed - strikethrogh, remove/ delete, shift tasks (...), important, clear completed, empty list, save list

import tkinter as tk
from tkinter import messagebox

class TodoApp: 
    def __init__(self, root): 
        self.root = root
        self.root.title("To-Do Listüìù")
        self.root.geometry("420x580")
        self.root.config(bg="mistyrose")

        self.tasks = []

        # Title
        title = tk.Label(root, text="My To-do listüìã", font=("Helvetica", 18, "bold"), bg="mistyrose")
        title.pack(pady=(10, 0))

        subtitle = tk.Label(root, text="Double-click to mark complete", font=("Arial", 9), fg="gray", bg="mistyrose")
        subtitle.pack(pady=(0, 10))

        # Input frame
        input_frame = tk.Frame(root, bg="mistyrose")
        input_frame.pack(pady=5)

        self.task_var = tk.StringVar()
        self.entry = tk.Entry(input_frame, textvariable=self.task_var, font=("Arial", 12), width=25)
        self.entry.grid(row=0, column=0, padx=5)

        add_btn = tk.Button(input_frame, text="+", font=("Arial", 14, "bold"),bg="#28a745", fg="white", width=3, command=self.add_task)
        add_btn.grid(row=0, column=1)

        # Task display area
        self.task_frame = tk.Frame(root, bg="pink")
        self.task_frame.pack(pady=10, fill="both", expand=True)

        # Bottom button frame
        button_frame = tk.Frame(root, bg="mistyrose")
        button_frame.pack(pady=10)

        clear_btn = tk.Button(button_frame, text="Clear Completed‚úÖ", bg="#3399ff", fg="white",
                              font=("Arial", 10, "bold"), command=self.clear_completed)
        clear_btn.grid(row=0, column=0, padx=5)

        empty_btn = tk.Button(button_frame, text="Empty Listüßπ", bg="#cc0000", fg="white",
                              font=("Arial", 10, "bold"), command=self.empty_list)
        empty_btn.grid(row=0, column=1, padx=5)

    def add_task(self, text=None):
        task_text = text if text else self.task_var.get().strip()
        if not task_text:
            messagebox.showwarning("Input Error", "Please enter a task.")
            return

        # Create task container
        task_container = tk.Frame(self.task_frame, bg="#FF7F7F", pady=5)
        task_container.pack(fill="x", padx=10, pady=5)

        # Task label
        label = tk.Label(task_container, text=f"‚Ä¢ {task_text}", font=("Arial", 12), bg="#FF7F7F", anchor="w")
        label.pack(side="left", padx=(10, 5), fill="x", expand=True)
        label.bind("<Double-Button-1>", lambda e, l=label: self.toggle_complete(l))

        # Edit button
        edit_btn = tk.Button(task_container, text="‚úé", bg="#FF7F7F", fg="white", bd=0, font=("Arial", 12),
                             command=lambda l=label: self.edit_task(l))
        edit_btn.pack(side="right", padx=5)

        # Delete button
        del_btn = tk.Button(task_container, text="üóë", bg="#FF7F7F", fg="white", bd=0, font=("Arial", 12),
                            command=lambda: self.delete_task(task_container))
        del_btn.pack(side="right")

        self.tasks.append({"frame": task_container, "label": label, "text": task_text, "completed": False})
        self.task_var.set("")

    def toggle_complete(self, label):
        for task in self.tasks:
            if task["label"] == label:
                task["completed"] = not task["completed"]
                clean = task["text"]
                frame = task["frame"]
                children = frame.winfo_children()

                if task["completed"]:
                    label.config(text="‚Ä¢ " + '\u0336'.join(clean) + '\u0336', fg="green", bg="white")
                    frame.config(bg="white")
                    for child in children:
                        if isinstance(child, tk.Button):
                            child.config(bg="white", fg="gray")
                else:
                    label.config(text="‚Ä¢ " + clean, fg="black", bg="#FF7F7F")
                    frame.config(bg="#FF7F7F")
                    for child in children:
                        if isinstance(child, tk.Button):
                            child.config(bg="#FF7F7F", fg="white")

    def delete_task(self, frame):
        for task in self.tasks:
            if task["frame"] == frame:
                task["frame"].destroy()
                self.tasks.remove(task)
                break

    def clear_completed(self):
        for task in self.tasks[:]:
            if task["completed"]:
                task["frame"].destroy()
                self.tasks.remove(task)

    def empty_list(self):
        for task in self.tasks:
            task["frame"].destroy()
        self.tasks.clear()

    def edit_task(self, label):
        for task in self.tasks:
            if task["label"] == label:
                # Replace label with entry box
                frame = task["frame"]
                label.pack_forget()

                edit_var = tk.StringVar(value=task["text"])
                edit_entry = tk.Entry(frame, textvariable=edit_var, font=("Arial", 12), width=25)
                edit_entry.pack(side="left", padx=(10, 5), fill="x", expand=True)
                edit_entry.focus()

                def save_edit(event=None):
                    new_text = edit_var.get().strip()
                    if new_text:
                        task["text"] = new_text
                        task["completed"] = False
                        task["label"].config(text="‚Ä¢ " + new_text, fg="black", bg="#FF7F7F")
                        edit_entry.destroy()
                        label.pack(side="left", padx=(10, 5), fill="x", expand=True)
                        frame.config(bg="#FF7F7F")
                        for child in frame.winfo_children():
                            if isinstance(child, tk.Button):
                                child.config(bg="#FF7F7F", fg="white")

                edit_entry.bind("<Return>", save_edit)
                edit_entry.bind("<FocusOut>", save_edit)
                break

root = tk.Tk()
app = TodoApp(root)
root.mainloop()

